"""
Django management command to validate environment variables.
Comando de gerenciamento Django para validar vari√°veis de ambiente.

This command checks if all required environment variables are set
and have valid values before starting the application.
Este comando verifica se todas vari√°veis de ambiente necess√°rias est√£o
definidas e t√™m valores v√°lidos antes de iniciar a aplica√ß√£o.
"""

import os
import sys

from django.core.management.base import BaseCommand, CommandError


class Command(BaseCommand):
    """
    Validate required environment variables and their values.
    Valida vari√°veis de ambiente obrigat√≥rias e seus valores.
    """

    help = "Validate required environment variables / Valida vari√°veis de ambiente obrigat√≥rias"

    # Required environment variables / Vari√°veis de ambiente obrigat√≥rias
    REQUIRED_VARS = {
        "SECRET_KEY": {
            "description": "Django secret key for cryptographic signing / Chave secreta Django para assinatura criptogr√°fica",
            "min_length": 50,
            "validate": lambda x: len(x) >= 50,
            "error_message": "SECRET_KEY must be at least 50 characters long / SECRET_KEY deve ter pelo menos 50 caracteres",
        },
        "DEBUG": {
            "description": "Debug mode (True/False) / Modo debug (True/False)",
            "allowed_values": ["True", "False", "true", "false", "1", "0"],
            "validate": lambda x: x in ["True", "False", "true", "false", "1", "0"],
            "error_message": "DEBUG must be True or False / DEBUG deve ser True ou False",
        },
        "DATABASE_URL": {
            "description": "Database connection URL / URL de conex√£o do banco de dados",
            "validate": lambda x: x.startswith(("postgres://", "postgresql://")),
            "error_message": "DATABASE_URL must be a valid PostgreSQL URL / DATABASE_URL deve ser uma URL PostgreSQL v√°lida",
        },
        "REDIS_URL": {
            "description": "Redis connection URL / URL de conex√£o do Redis",
            "validate": lambda x: x.startswith("redis://"),
            "error_message": "REDIS_URL must be a valid Redis URL / REDIS_URL deve ser uma URL Redis v√°lida",
        },
        "POSTGRES_DB": {
            "description": "PostgreSQL database name / Nome do banco de dados PostgreSQL",
            "validate": lambda x: len(x) > 0,
            "error_message": "POSTGRES_DB cannot be empty / POSTGRES_DB n√£o pode estar vazio",
        },
        "POSTGRES_USER": {
            "description": "PostgreSQL user / Usu√°rio PostgreSQL",
            "validate": lambda x: len(x) > 0,
            "error_message": "POSTGRES_USER cannot be empty / POSTGRES_USER n√£o pode estar vazio",
        },
        "POSTGRES_PASSWORD": {
            "description": "PostgreSQL password / Senha PostgreSQL",
            "min_length": 8,
            "validate": lambda x: len(x) >= 8,
            "error_message": "POSTGRES_PASSWORD must be at least 8 characters / POSTGRES_PASSWORD deve ter pelo menos 8 caracteres",
        },
    }

    # Optional but recommended variables / Vari√°veis opcionais mas recomendadas
    RECOMMENDED_VARS = {
        "ALLOWED_HOSTS": {
            "description": "Comma-separated list of allowed hosts / Lista de hosts permitidos separados por v√≠rgula",
        },
        "CSRF_TRUSTED_ORIGINS": {
            "description": "Comma-separated list of trusted origins for CSRF / Lista de origens confi√°veis para CSRF",
        },
        "SENTRY_DSN": {
            "description": "Sentry DSN for error tracking / DSN do Sentry para rastreamento de erros",
        },
    }

    def add_arguments(self, parser):
        """
        Add command arguments.
        Adiciona argumentos do comando.
        """
        parser.add_argument(
            "--strict",
            action="store_true",
            help="Fail if recommended variables are missing / Falha se vari√°veis recomendadas estiverem faltando",
        )
        parser.add_argument(
            "--exit-on-error",
            action="store_true",
            help="Exit with error code if validation fails / Sai com c√≥digo de erro se valida√ß√£o falhar",
        )

    def handle(self, *args, **options):
        """
        Execute the command.
        Executa o comando.
        """
        self.stdout.write(
            self.style.SUCCESS(
                "\nüîç Validating Environment Variables / Validando Vari√°veis de Ambiente\n"
            )
        )

        errors = []
        warnings = []

        # Check required variables / Verifica vari√°veis obrigat√≥rias
        self.stdout.write("\nüìã Required Variables / Vari√°veis Obrigat√≥rias:\n")
        for var_name, config in self.REQUIRED_VARS.items():
            var_value = os.environ.get(var_name)

            if var_value is None:
                error_msg = f"‚ùå {var_name}: MISSING / FALTANDO"
                self.stdout.write(self.style.ERROR(f"  {error_msg}"))
                self.stdout.write(f"     {config['description']}")
                errors.append(f"{var_name} is not set / n√£o est√° definida")
            else:
                # Validate value / Valida valor
                if "validate" in config and not config["validate"](var_value):
                    error_msg = f"‚ùå {var_name}: INVALID / INV√ÅLIDO"
                    self.stdout.write(self.style.ERROR(f"  {error_msg}"))
                    self.stdout.write(f"     {config['error_message']}")
                    errors.append(config["error_message"])
                else:
                    # Mask sensitive values / Mascara valores sens√≠veis
                    if var_name in [
                        "SECRET_KEY",
                        "POSTGRES_PASSWORD",
                        "SENTRY_DSN",
                    ]:
                        display_value = var_value[:8] + "..." + var_value[-8:]
                    else:
                        display_value = var_value

                    self.stdout.write(
                        self.style.SUCCESS(f"  ‚úÖ {var_name}: {display_value}")
                    )

        # Check recommended variables / Verifica vari√°veis recomendadas
        self.stdout.write("\nüí° Recommended Variables / Vari√°veis Recomendadas:\n")
        for var_name, config in self.RECOMMENDED_VARS.items():
            var_value = os.environ.get(var_name)

            if var_value is None:
                warning_msg = f"‚ö†Ô∏è  {var_name}: NOT SET / N√ÉO DEFINIDA"
                self.stdout.write(self.style.WARNING(f"  {warning_msg}"))
                self.stdout.write(f"     {config['description']}")
                warnings.append(f"{var_name} is not set / n√£o est√° definida")
            else:
                self.stdout.write(
                    self.style.SUCCESS(f"  ‚úÖ {var_name}: SET / DEFINIDA")
                )

        # Summary / Resumo
        self.stdout.write("\n" + "=" * 60)
        if errors:
            self.stdout.write(
                self.style.ERROR(
                    f"\n‚ùå Validation Failed / Valida√ß√£o Falhou: {len(errors)} error(s) / erro(s)\n"
                )
            )
            for error in errors:
                self.stdout.write(self.style.ERROR(f"  ‚Ä¢ {error}"))

            if options["exit_on_error"]:
                sys.exit(1)
            else:
                raise CommandError(
                    "Environment validation failed / Valida√ß√£o de ambiente falhou"
                )

        if warnings:
            self.stdout.write(
                self.style.WARNING(f"\n‚ö†Ô∏è  {len(warnings)} warning(s) / aviso(s):\n")
            )
            for warning in warnings:
                self.stdout.write(self.style.WARNING(f"  ‚Ä¢ {warning}"))

            if options["strict"]:
                self.stdout.write(
                    self.style.ERROR(
                        "\n‚ùå Strict mode: Recommended variables are missing / Modo estrito: Vari√°veis recomendadas est√£o faltando"
                    )
                )
                if options["exit_on_error"]:
                    sys.exit(1)
                else:
                    raise CommandError(
                        "Strict mode: Recommended variables missing / Modo estrito: Vari√°veis recomendadas faltando"
                    )

        self.stdout.write(
            self.style.SUCCESS(
                "\n‚úÖ Environment validation passed! / Valida√ß√£o de ambiente passou!\n"
            )
        )
